import React, { useState } from "react";
import { Box, Text, Grid, GridItem } from "@chakra-ui/react";
import {
  DndContext,
  closestCenter,
  useSensor,
  useSensors,
  PointerSensor,
  KeyboardSensor,
  DragOverlay,
  DragEndEvent,
  useDroppable,
} from "@dnd-kit/core";
import {
  SortableContext,
  useSortable,
  sortableKeyboardCoordinates,
} from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { bg, he } from "date-fns/locale";

// Define days & time slots
const days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];
const timeSlots = ["9:00 AM", "10:00 AM", "11:00 AM", "1:00 PM", "2:00 PM", "3:00 PM"];

interface Lesson {
  id: string;
  teacher: string;
  subject: string;
  day: string;
  time: string;
}

// Initial Lessons
const initialLessons: Lesson[] = [
  { id: "1", teacher: "Elena Studenkova", subject: "Jazz Vocal", day: "Monday", time: "10:00 AM" },
  { id: "2", teacher: "Oleg Novikov", subject: "Guitar", day: "Wednesday", time: "2:00 PM" },
];

const SortableLesson: React.FC<{ lesson: Lesson }> = ({ lesson }) => {
  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: lesson.id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    padding: "2px",
    borderRadius: "5px",
    backgroundColor: "blue",
    color: "white",
    textAlign: "center" as const,
    marginBottom: "2px",
    height: "100%",
    cursor: "grab",
  };

  return (
    <Box ref={setNodeRef} style={style} {...attributes} {...listeners}>
      {lesson.subject} ({lesson.teacher})
    </Box>
  );
};

const DroppableSlot: React.FC<{ id: string; children: React.ReactNode }> = ({ id, children }) => {
  const { setNodeRef } = useDroppable({ id });

  return (
    <GridItem
      ref={setNodeRef}
      id={id}
      p={3}
      borderWidth="1px"
      borderRadius="md"
      bg="gray.100"
      minH="100px"
      textAlign="center"
    >
      {children}
    </GridItem>
  );
};

const CalendarView: React.FC = () => {
  const [lessons, setLessons] = useState<Lesson[]>(initialLessons);
  const [activeLesson, setActiveLesson] = useState<Lesson | null>(null);

  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, { coordinateGetter: sortableKeyboardCoordinates })
  );

  // Handle Drag Start
  const onDragStart = (event: { active: { id: string } }) => {
    const lesson = lessons.find((l) => l.id === event.active.id);
    setActiveLesson(lesson ?? null);
  };

  // Handle Drag End
  const onDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    setActiveLesson(null);
    if (!over) return;

    const draggedLesson = lessons.find((lesson) => lesson.id === active.id);
    if (!draggedLesson) return;

    // Extract new day & time slot from drop target
    const [newDayIndex, newTimeIndex] = over.id.split("-");
    const newDay = days[parseInt(newDayIndex, 10)];
    const newTime = timeSlots[parseInt(newTimeIndex, 10)];

    // Update lesson's time & day
    setLessons((prevLessons) =>
      prevLessons.map((lesson) =>
        lesson.id === draggedLesson.id ? { ...lesson, day: newDay, time: newTime } : lesson
      )
    );
  };

  return (
    <Box p={5} bg="white" boxShadow="md" borderRadius="lg" overflowX="auto">
      <Text fontSize="lg" fontWeight="bold" mb={4}>
        Weekly Schedule
      </Text>

      <DndContext sensors={sensors} collisionDetection={closestCenter} onDragStart={onDragStart} onDragEnd={onDragEnd}>
        <SortableContext items={lessons.map((lesson) => lesson.id)}>
          <Grid templateColumns="repeat(6, 1fr)" gap={2} w="full">
            {/* Header Row: Empty Cell + Weekdays */}
            <GridItem></GridItem>
            {days.map((day) => (
              <GridItem key={day} textAlign="center" fontWeight="bold">
                {day}
              </GridItem>
            ))}

            {/* Time Slots and Lessons */}
            {timeSlots.map((time, timeIndex) => (
              <React.Fragment key={time}>
                {/* Time Column */}
                <GridItem textAlign="center" fontWeight="bold" bg="blue.100" p={2} borderRadius="md">
                  {time}
                </GridItem>

                {/* Lesson Slots */}
                {days.map((day, dayIndex) => {
                  const slotId = `${dayIndex}-${timeIndex}`;
                  const lessonsInSlot = lessons.filter((l) => l.day === day && l.time === time);

                  return (
                    <DroppableSlot key={slotId} id={slotId}>
                      {lessonsInSlot.map((lesson) => (
                        <SortableLesson key={lesson.id} lesson={lesson} />
                      ))}
                    </DroppableSlot>
                  );
                })}
              </React.Fragment>
            ))}
          </Grid>
        </SortableContext>

        {/* Drag Overlay (For better dragging effect) */}
        <DragOverlay>
          {activeLesson ? (
            <Box
              p={1}
              borderRadius="md"
              bg="blue.500"
              color="white"
              textAlign="center"
              boxShadow="lg"
            >
              {activeLesson.subject} ({activeLesson.teacher})
            </Box>
          ) : null}
        </DragOverlay>
      </DndContext>
    </Box>
  );
};

export default CalendarView;