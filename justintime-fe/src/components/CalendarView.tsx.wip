import React, { useState } from "react";
import {
  Box,
  Text,
  Button,
  FormControl,
  FormLabel,
  Input,
  Select,
  useDisclosure,
} from "@chakra-ui/react";

import { 
    DialogRoot,
    DialogContent,
    DialogHeader,
    DialogBody,
    DialogFooter,    
} from "@/components/ui/dialog"
import FullCalendar from "@fullcalendar/react";
import timeGridPlugin from "@fullcalendar/timegrid";
import interactionPlugin from "@fullcalendar/interaction";
import { EventClickArg, EventDropArg } from "@fullcalendar/core";

// Define days & time slots
const days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];
const timeSlots = ["09:00", "10:00", "11:00", "12:00", "14:00", "15:00", "16:00", "17:00"];

interface Lesson {
  id: string;
  teacher: string;
  subject: string;
  start: Date;
  end: Date;
}

// Helper function to get a date in the current week
const getDateForThisWeek = (dayIndex: number, time: string): Date => {
  const today = new Date();
  const currentDay = today.getDay(); // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
  const diff = dayIndex - (currentDay === 0 ? 7 : currentDay); // Adjust for Monday start
  const newDate = new Date(today);
  newDate.setDate(today.getDate() + diff);
  const [hours, minutes] = time.split(":").map(Number);
  newDate.setHours(hours, minutes, 0, 0);
  return newDate;
};

// Sample lessons
const initialLessons: Lesson[] = [
  { id: "1", teacher: "Mr. A", subject: "ðŸŽµ Piano", start: getDateForThisWeek(1, "10:00"), end: getDateForThisWeek(1, "11:00") },
  { id: "2", teacher: "Ms. B", subject: "ðŸŽ¸ Guitar", start: getDateForThisWeek(3, "14:00"), end: getDateForThisWeek(3, "15:00") },
];

const CalendarView: React.FC = () => {
  const [lessons, setLessons] = useState<Lesson[]>(initialLessons);
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [newLesson, setNewLesson] = useState({ teacher: "", subject: "", day: "Monday", time: "09:00" });

  // Handle event drop (drag & drop)
  const handleEventDrop = (eventDropInfo: EventDropArg) => {
    setLessons((prevLessons) =>
      prevLessons.map((lesson) =>
        lesson.id === eventDropInfo.event.id
          ? { ...lesson, start: new Date(eventDropInfo.event.startStr), end: new Date(eventDropInfo.event.endStr) }
          : lesson
      )
    );
  };

  // Handle new lesson input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setNewLesson({ ...newLesson, [e.target.name]: e.target.value });
  };

  // Add new lesson
  const addLesson = () => {
    const dayIndex = days.indexOf(newLesson.day);
    const start = getDateForThisWeek(dayIndex, newLesson.time);
    const end = new Date(start);
    end.setHours(start.getHours() + 1); // Default lesson duration = 1 hour

    const newLessonData: Lesson = {
      id: (lessons.length + 1).toString(),
      teacher: newLesson.teacher,
      subject: newLesson.subject,
      start,
      end,
    };

    setLessons([...lessons, newLessonData]);
    onClose();
  };

  return (
    <Box p={5} bg="white" boxShadow="md" borderRadius="lg">
      <Text fontSize="lg" fontWeight="bold" mb={4}>
        Weekly Schedule
      </Text>

      {/* Add Lesson Button */}
      <Button colorScheme="blue" onClick={onOpen} mb={4}>
        + New Lesson
      </Button>

      {/* FullCalendar Component */}
      <FullCalendar
        plugins={[timeGridPlugin, interactionPlugin]}
        initialView="timeGridWeek"
        editable={true}
        timeZone="local"
        slotMinTime="09:00:00" // Start at 9 AM
        slotMaxTime="18:00:00" // End at 6 PM
        events={lessons.map((lesson) => ({
          id: lesson.id,
          title: `${lesson.subject} (${lesson.teacher})`,
          start: lesson.start.toISOString(),
          end: lesson.end.toISOString(),
        }))}
        eventDrop={handleEventDrop}
        headerToolbar={{
          left: "prev,next today",
          center: "title",
          right: "timeGridWeek,timeGridDay",
        }}
        height="auto"
      />

      {/* Add New Lesson Dialog */}
      <DialogRoot isOpen={isOpen} onClose={onClose}>
        <DialogOverlay />
        <DialogContent>
          <DialogHeader>Add New Lesson</DialogHeader>
          <DialogCloseButton />
          <DialogBody>
            <FormControl mb={3}>
              <FormLabel>Teacher</FormLabel>
              <Input name="teacher" value={newLesson.teacher} onChange={handleInputChange} />
            </FormControl>
            <FormControl mb={3}>
              <FormLabel>Subject</FormLabel>
              <Input name="subject" value={newLesson.subject} onChange={handleInputChange} />
            </FormControl>
            <FormControl mb={3}>
              <FormLabel>Day</FormLabel>
              <Select name="day" value={newLesson.day} onChange={handleInputChange}>
                {days.map((day) => (
                  <option key={day} value={day}>
                    {day}
                  </option>
                ))}
              </Select>
            </FormControl>
            <FormControl mb={3}>
              <FormLabel>Time</FormLabel>
              <Select name="time" value={newLesson.time} onChange={handleInputChange}>
                {timeSlots.map((time) => (
                  <option key={time} value={time}>
                    {time}
                  </option>
                ))}
              </Select>
            </FormControl>
          </DialogBody>
          <DialogFooter>
            <Button colorScheme="blue" onClick={addLesson} isDisabled={!newLesson.teacher || !newLesson.subject}>
              Add Lesson
            </Button>
          </DialogFooter>
        </DialogContent>
      </DialogRoot>
    </Box>
  );
};

export default CalendarView;